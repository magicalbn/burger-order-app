{"id":"../node_modules/physical-cpu-count/index.js","dependencies":[{"name":"E:\\HTML\\React Projects\\burger-builder\\package.json","includedInParent":true,"mtime":1605006976611},{"name":"E:\\HTML\\React Projects\\burger-builder\\.babelrc","includedInParent":true,"mtime":1604411538579},{"name":"E:\\HTML\\React Projects\\burger-builder\\node_modules\\physical-cpu-count\\package.json","includedInParent":true,"mtime":1604411084119},{"name":"os","loc":{"line":3,"column":19},"parent":"E:\\HTML\\React Projects\\burger-builder\\node_modules\\physical-cpu-count\\index.js","resolved":"E:\\HTML\\React Projects\\burger-builder\\node_modules\\os-browserify\\browser.js"},{"name":"child_process","loc":{"line":4,"column":29},"parent":"E:\\HTML\\React Projects\\burger-builder\\node_modules\\physical-cpu-count\\index.js","resolved":"E:\\HTML\\React Projects\\burger-builder\\node_modules\\parcel-bundler\\src\\builtins\\_empty.js"}],"generated":{"js":"'use strict'\n\nconst os = require('os')\nconst childProcess = require('child_process')\n\nfunction exec (command) {\n  const output = childProcess.execSync(command, {encoding: 'utf8'})\n  return output\n}\n\nlet amount\nconst platform = os.platform()\n\nif (platform === 'linux') {\n  const output = exec('lscpu -p | egrep -v \"^#\" | sort -u -t, -k 2,4 | wc -l')\n  amount = parseInt(output.trim(), 10)\n} else if (platform === 'darwin') {\n  const output = exec('sysctl -n hw.physicalcpu_max')\n  amount = parseInt(output.trim(), 10)\n} else if (platform === 'windows') {\n  const output = exec('WMIC CPU Get NumberOfCores')\n  amount = output.split(os.EOL)\n    .map(function parse (line) { return parseInt(line) })\n    .filter(function numbers (value) { return !isNaN(value) })\n    .reduce(function add (sum, number) { return sum + number }, 0)\n} else {\n  const cores = os.cpus().filter(function (cpu, index) {\n    const hasHyperthreading = cpu.model.includes('Intel')\n    const isOdd = index % 2 === 1\n    return !hasHyperthreading || isOdd\n  })\n  amount = cores.length\n}\n\nmodule.exports = amount\n","map":{"mappings":[{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/physical-cpu-count/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"../node_modules/physical-cpu-count/index.js":"'use strict'\n\nconst os = require('os')\nconst childProcess = require('child_process')\n\nfunction exec (command) {\n  const output = childProcess.execSync(command, {encoding: 'utf8'})\n  return output\n}\n\nlet amount\nconst platform = os.platform()\n\nif (platform === 'linux') {\n  const output = exec('lscpu -p | egrep -v \"^#\" | sort -u -t, -k 2,4 | wc -l')\n  amount = parseInt(output.trim(), 10)\n} else if (platform === 'darwin') {\n  const output = exec('sysctl -n hw.physicalcpu_max')\n  amount = parseInt(output.trim(), 10)\n} else if (platform === 'windows') {\n  const output = exec('WMIC CPU Get NumberOfCores')\n  amount = output.split(os.EOL)\n    .map(function parse (line) { return parseInt(line) })\n    .filter(function numbers (value) { return !isNaN(value) })\n    .reduce(function add (sum, number) { return sum + number }, 0)\n} else {\n  const cores = os.cpus().filter(function (cpu, index) {\n    const hasHyperthreading = cpu.model.includes('Intel')\n    const isOdd = index % 2 === 1\n    return !hasHyperthreading || isOdd\n  })\n  amount = cores.length\n}\n\nmodule.exports = amount\n"},"lineCount":36}},"hash":"b05b5d4812bbefb7b6112aed99a00686","cacheData":{"env":{}}}